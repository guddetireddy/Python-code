# Binary tree node
class Node

     def __init__(self, data): 
        self.data = data 
        self.left = None
        self.right = None
        
 def (root, n1, n2):
 
    if root is None:
       return None
       
     # If both n1 and n2 are smaller than root, then LCA 
    # lies in left 
    if(root.data > n1 and root.data > n2): 
        return lca(root.left, n1, n2) 
  
    # If both n1 and n2 are greater than root, then LCA 
    # lies in right  
    if(root.data < n1 and root.data < n2): 
        return lca(root.right, n1, n2) 
  
    return root 
  
# Let us construct the BST shown in the figure 
root = Node(2) 
root.left = Node(1) 
root.right = Node(3) 
root.right.left = Node(4) 
root.right.right = Node(5)
root.right = Node(6)

n1 = 1 ; n2 = 5
t = lca(root, n1, n2) 
print "LCA of %d and %d is %d" %(n1, n2, t.data) 
  
n1 = 3 ; n2 = 6
t = lca(root, n1, n2) 
print "LCA of %d and %d is %d" %(n1, n2 , t.data) 
  
n1 = 4 ; n2 = 6
t = lca(root, n1, n2) 
print "LCA of %d and %d is %d" %(n1, n2, t.data) 

    
    
 
